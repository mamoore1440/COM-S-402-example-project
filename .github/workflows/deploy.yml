name: Deploy

on: 
  push:
    branches: ['main']
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  deployments: write

env:
  REGION: us-east-1
  BACKEND_STACK_NAME: "backend-yeet"
  FRONTEND_STACK_NAME: "frontend-yeet"

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    outputs:
      IP_ADDRESS: ${{ steps.deploy-stack.outputs.IP_ADDRESS }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Deploy Backend
        id: deploy-stack
        run: |
          sam deploy --region $REGION --stack-name $BACKEND_STACK_NAME -t backend.template.yml

          EC2_IP_ADDRESS=$(aws cloudformation describe-stacks --region $REGION --stack-name $BACKEND_STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`IPAddress`].OutputValue' --output text)

          echo "EC2_IP_ADDRESS=$EC2_IP_ADDRESS" >> $GITHUB_ENV
          echo "IP_ADDRESS=$EC2_IP_ADDRESS" >> $GITHUB_OUTPUT

      - name: Start API 
        run: |
          # Grab the SSH key from AWS
          KEY_PAIR_NAME=$(aws cloudformation describe-stacks --region $REGION --stack-name $BACKEND_STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`SSHKeyPairName`].OutputValue' --output text)
          aws ssm get-parameter --name $KEY_PAIR_NAME --region $REGION --with-decryption --query 'Parameter.Value' --output text > key.pem
          chmod 600 key.pem

          EC2_INSTANCE_ID=$(aws ec2 describe-instances --region $REGION --filters "Name=ip-address,Values=$EC2_IP_ADDRESS" --query "Reservations[*].Instances[*].[InstanceId]" --output text)
          EC2_INSTANCE_STATUS=$(aws ec2 describe-instance-status --region $REGION --instance-id $EC2_INSTANCE_ID --query "InstanceStatuses[?InstanceId=='$EC2_INSTANCE_ID'].InstanceState.Name")

          until [ "$EC2_INSTANCE_STATUS" == "running" ]; do
            echo "Starting EC2 Instance..."
            aws ec2 start-instances --instance-ids $EC2_INSTANCE_ID
            sleep 30
            EC2_INSTANCE_STATUS=$(aws ec2 describe-instance-status --region $REGION --instance-id $EC2_INSTANCE_ID --query "InstanceStatuses[?InstanceId=='$EC2_INSTANCE_ID'].InstanceState.Name" --output text)
          done
          echo "Copying backend code to VM"
          rsync -e "ssh -i key.pem -o StrictHostKeyChecking=no" -r backend/ ubuntu@$EC2_IP_ADDRESS:backend

          echo "Starting backend on VM"
          ssh -i key.pem -o "StrictHostKeyChecking no" ubuntu@$EC2_IP_ADDRESS "
          # Install docker if it does not already exist
          if ! [ -x "$(command -v docker)" ]; then 
            sudo apt-get update
            sudo apt-get upgrade -y
            sudo apt-get install docker.io -y
            sudo chmod 666 /var/run/docker.sock
          fi

          # Stop & Clear old docker containers (Note this will cause some downtime)
          docker kill \$(docker container ps -a -q)

          # Build the latest version of the docker image and launch it
          cd backend
          docker build -t api .
          docker run -d -p 3000:3000 --restart=unless-stopped api
          "

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Deploy frontend
        run: |
          sam deploy --region $REGION --stack-name $FRONTEND_STACK_NAME -t frontend.template.yml

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: ./frontend/.nvmrc

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        working-directory: ./frontend

      - name: Build and push static frontend
        run: |
          cd frontend
          npm run build

          BUCKET=$(aws cloudformation describe-stacks --stack-name="$FRONTEND_STACK_NAME" --region $REGION --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' --output text)

          aws s3 sync build s3://$BUCKET

      - name: Generate Github Actions summary
        run: |
          FRONTEND_URL=$(aws cloudformation describe-stacks --stack-name $FRONTEND_STACK_NAME --region $REGION --query 'Stacks[0].Outputs[?OutputKey==`FrontendUrl`].OutputValue' --output text)
          echo "### Deploy succeeded" >> $GITHUB_STEP_SUMMARY
          echo "Frontend: [$FRONTEND_URL]($FRONTEND_URL)" >> $GITHUB_STEP_SUMMARY
          echo "Virtual Machine: ${{ needs.deploy-backend.outputs.IP_ADDRESS }}" >> $GITHUB_STEP_SUMMARY
